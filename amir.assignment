```tsx
import React from 'react';

type ButtonProps = {
  variant: 'big' | 'small';
  onClick: () => void;
  children: React.ReactNode;
};

const Button: React.FC<ButtonProps> = ({ variant, onClick, children }) => {
  const buttonStyle = variant === 'big' ? 'big-button' : 'small-button';

  return (
    <button className={buttonStyle} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;
```
```tsx
import React from 'react';

type CheckboxProps = {
  label: string;
  checked: boolean;
  onChange: (checked: boolean) => void;
};

const Checkbox: React.FC<CheckboxProps> = ({ label, checked, onChange }) => {
  return (
    <div className="checkbox">
      <input
        type="checkbox"
        checked={checked}
        onChange={(e) => onChange(e.target.checked)}
      />
      <label>{label}</label>
    </div>
  );
};

export default Checkbox;
``````

```tsx
import React, { useState } from 'react';
import Button from './Button';
import Checkbox from './Checkbox';

type TodoRowProps = {
  label: string;
};

const TodoRow: React.FC<TodoRowProps> = ({ label }) => {
  const [hovered, setHovered] = useState(false);

  const handleMouseEnter = () => {
    setHovered(true);
  };

  const handleMouseLeave = () => {
    setHovered(false);
  };

  return (
    <div className="todo-row" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
      <Checkbox label={label} checked={false} onChange={() => {}} />
      {hovered && (
